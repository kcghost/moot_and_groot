#!/bin/bash
# Copyright (C) 2016 Casey Fitzpatrick
#
# This file is part of moot_and_groot.
# 
# moot_and_groot is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# moot_and_groot is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with moot_and_groot.  If not, see <http://www.gnu.org/licenses/>.
#
# Run a shell with only privileges over the current directory, meant for builds.

# Usage info
show_help() {
	cat << EOF
Usage: ${0##*/} [-h] [-q] [-c COMMAND] [-u USER] [-g GROUPS]
Execute COMMAND as USER with temporary privileges over the current directory.

    -h         Display this help and exit.
    -q         Do not generate verbose messages.
    -c COMMAND Specify a command to execute. The default is: ${cmd}.
    -u USER    Specify a user to use. A random temporary user is created/destroyed when unspecified.
    -g GROUPS  Specify supplemental groups to give the user when executing COMMAND, comma separated. Defaults to ${suppl_groups}.

Note that '-g ""' can be used to prevent giving the user group privileges.
The default is useful to prevent the need for a fake directory tree and give
read access to bashrc. This assumes you have sane group priviliges that are
mostly read-only.

The defaults will launch a shell as a random user with full priviliges over the
current directory. The ownership of any created files will be changed to
${cur_user} at the end of the session.

The intended use of this utility is for root users to conveniently run builds in
their home directories without the possibility of wrecking the whole system.

Do NOT run this utility in a high level directory with lots of files underneath
it. Permissions must be given for each file recursively and it could take some
time to complete.

EOF
}

failure() {
	echo "An unexpected failure occurred, exiting..."
	exit 1
}

recursive_umount() {
	grep --color=never "${1}" /proc/mounts | cut -f2 -d" " | sort -r | xargs umount -ln &>/dev/null
	umount "${1}" &>/dev/null
	umount --fake "${1}" &>/dev/null
}

# Being part of root group can allow this to work in most cases
cmd="/bin/bash --rcfile $(realpath ~/.bashrc)"
directory=${PWD}
verbose=true
random_user=true
user=""
# Almost certainly "root", but it doesn't hurt to be sure
cur_user=$(whoami)
suppl_groups="${cur_user}"

OPTIND=1
while getopts "hqc:u:g:" opt; do
	case "${opt}" in
		h)
			show_help
			exit 0
			;;
		q)
			verbose=false
			;;
		c)
			cmd=${OPTARG}
			;;
		u)
			random_user=false
			user=${OPTARG}
			;;
		g)
			suppl_groups=${OPTARG}
			;;
		'?')
			show_help >&2
			exit 1
			;;
	esac
done
shift "$((OPTIND-1))" # Shift off the options and optional --.

# Create random user
if [ "${random_user}" = true ] ; then
	# Create a random unprivileged system user and group
	user=$(tr -dc 'a-z' < /dev/urandom | fold -w 31 | head -n 1)
	${verbose} && echo "Creating random user ${user}..."
	useradd -rU "${user}"
fi

# Use UID/GID, apparently 32 bit chroot fails to use names http://unix.stackexchange.com/questions/37712/chroot-fails-with-userspec-when-chroot-is-i686
user_uid=$(id -u "${user}")
user_gid=$(id -g "${user}")

# If the directory path contains untraversable directories (no execute bit), 
# than just giving permissions on the directory will not work when absolute 
# paths are used, which will screw up some build systems.
# Rather than compromise security by allowing the user execute permissions on
# the path directories, use a bindmount/chroot to fake the untraversable path

# Find the topmost untraversable directory.
root_dir="/"
untraversable=""
parent="${directory}/foo"
while [ "${parent}" != "/" ]; do
	parent=$(dirname "${parent}")
	if ! chroot --userspec="${user_uid}:${user_gid}" --groups="${user_gid},${suppl_groups}" "${root_dir}" /bin/bash -c "cd ${parent}" &>/dev/null; then
		untraversable="${parent}"
	fi
done

# If an untraverable path exists
if [ -n "${untraversable}" ]; then
	${verbose} && echo "Path ${untraversable} is untraversable, faking path past that point..."

	workdir="/tmp/moot-$$"
	root_dir="${workdir}/root_dir"

	mkdir -m 750 "${workdir}"
	mkdir -m 750 "${workdir}/fake_dir"
	mkdir -m 750 "${workdir}/root_dir"
	(umask 027; mkdir -p "${workdir}/fake_dir/${directory}")
	chgrp -R "${user}" "${workdir}"

	mount --rbind "${directory}" "${workdir}/fake_dir/${directory}"
	mount --rbind "/" "${workdir}/root_dir"
	mount --rbind "${workdir}/fake_dir/${untraversable}" "${workdir}/root_dir/${untraversable}"
fi

${verbose} && echo "Giving ${user} ownership of ${directory} and its contents..."
chown -R "${user}:${user}" "${directory}"

${verbose} && echo "Launching ${cmd} as ${user}"

# Cannot use || failure here as it triggers "failure" if last command in the shell was false.
chroot --userspec="${user_uid}:${user_gid}" --groups="${user_gid},${suppl_groups}" "${root_dir}" /bin/bash -c "cd ${directory} && ${cmd}"

if [ -n "${untraversable}" ]; then
	${verbose} && echo "Removing fake path..."

	recursive_umount "${workdir}/root_dir/${untraversable}"
	recursive_umount "${workdir}/root_dir"
	recursive_umount "${workdir}/fake_dir/${directory}"

	rmdir "${workdir}/root_dir"
	(cd "${workdir}" && rmdir -p "fake_dir/${directory}")
	rmdir "${workdir}"
fi

${verbose} && echo "Changing the ownership back to ${cur_user}..."
# Find any newly created files and change ownership back to the current user
chown -R "${cur_user}:${cur_user}" "${directory}"

# Remove random user
if [ "${random_user}" = true ] ; then
	${verbose} && echo "Removing user ${user}..."
	userdel "${user}"
fi

exit 0
