#!/bin/bash
# Run a shell as root without programs knowing of your rootness.

# Usage info
show_help() {
	cat << EOF
Usage: ${0##*/} [-h] [-q] [-c COMMAND]
Execute shell or COMMAND without complaints about using superuser.

    -h         Display this help and exit.
    -q         Do not generate verbose messages.
    -c COMMAND Specify a command to execute. The default is: ${cmd}.

By default, 'groot' will launch a bash shell in which the UID and EUID 
environment variables are set to '1'. Bash scripts checking these variables, 
that would normally complain when run as root, should cease to complain.

groot also overrides 'getuid' and 'geteuid' calls from all programs launched.
By default, the real results are given, but can be overridden for individual 
programs via the configuration file /etc/uid.conf. The format of each line being
the program invocation short name, followed by the uid that should be faked, 
followed by the euid that should be faked.

EOF
}

failure() {
	echo "An unexpected failure occurred, exiting..."
	exit 1
}

function bash_unroot {
	# Unset bash "read-only" variables
	cat << EOF | gdb >/dev/null 2>&1
attach $$
call unbind_variable("UID")
call unbind_variable("EUID")
detach
EOF
	export UID=1
	export EUID=1
}

cmd="/bin/bash --rcfile $(realpath ~/.bashrc)"

OPTIND=1
while getopts "hqc:u:g:" opt; do
	case "${opt}" in
		h)
			show_help
			exit 0
			;;
		q)
			verbose=false
			;;
		c)
			cmd=${OPTARG}
			;;
		'?')
			show_help >&2
			exit 1
			;;
	esac
done
shift "$((OPTIND-1))" # Shift off the options and optional --.


${verbose} && echo "Setting bash \$UID and \$EUID..."
bash_unroot

if [ -f /usr/local/lib/libuid.so ]; then
	LIBUID_LOCATION=/usr/local/lib/libuid.so
else
	LIBUID_LOCATION=/lib/libuid.so
fi

${verbose} && echo "Launching ${cmd} with uid and euid hooks..."
#LIBUID_VERBOSE= LD_PRELOAD=${LIBUID_LOCATION} /bin/bash -c "${cmd}"
LD_PRELOAD=${LIBUID_LOCATION} /bin/bash -c "${cmd}"

exit 0
